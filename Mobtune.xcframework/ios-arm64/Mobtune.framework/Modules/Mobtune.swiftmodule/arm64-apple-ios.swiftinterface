// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Mobtune
import AdSupport
import AppTrackingTransparency
import Foundation
@_exported import Mobtune
import StoreKit
import Swift
import UIKit
import WebKit
import _Concurrency
@_inheritsConvenienceInitializers @objc public class ProductInfo : EventParam {
  public var orderId: Swift.String!
  public var productItems: [ProductItem]!
  public var totalPrice: Swift.String!
  public var paymentMethod: PaymentMethod!
  @objc override dynamic public init()
  @objc public init(orderID: Swift.String, items: [ProductItem], totalPrice: Swift.String, method: PaymentMethod)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class EventParam : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PaymentMethod : Swift.Int {
  case CREDICTCARD = 1
  case BANKTRANSFER = 2
  case MOBILEPAYMENT = 3
  case ETC = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class Mobtune : ObjectiveC.NSObject {
  @objc public static func configure(appKey: Swift.String)
  @objc public static func setDeepLink(linkUrl: Swift.String)
  @objc public static func getConfiguration() -> WebKit.WKWebViewConfiguration
  public static func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  public static func addEvent(eventType: MobtuneEvent, param: EventParam)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class OrderCancelData : EventParam {
  public var orderID: Swift.String!
  public var method: PaymentMethod?
  public var toPrice: Swift.String?
  public var products: [ProductItem]?
  @objc override dynamic public init()
  public init(orderID: Swift.String, method: PaymentMethod?, price: Swift.String?, products: [ProductItem]?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class CartData : EventParam {
  public var cartID: Swift.String?
  public var products: [ProductItem]?
  @objc override dynamic public init()
  @objc public init(cartID: Swift.String?, products: [ProductItem])
  @objc deinit
}
@objc public enum MobtuneEvent : Swift.Int {
  case ORDER
  case SIGNIN
  case SIGNUP
  case ACCOUNTDELETED
  case SHOPPINGCART
  case ORDERCANCEL
  case ACCOUNTMODIFIED
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ProductItem : ObjectiveC.NSObject {
  public var productId: Swift.String!
  public var productName: Swift.String!
  public var price: Swift.String?
  public var quantity: Swift.String?
  public var productOption: Swift.String?
  @objc override dynamic public init()
  public init(productID: Swift.String, name: Swift.String, price: Swift.String?, quantity: Swift.String?, option: Swift.String?)
  @objc deinit
}
@objc public class UserInfoData : UserAccountData {
  public var nameInfo: Swift.String?
  public var nicknameInfo: Swift.String?
  public var genderInfo: Swift.String?
  public var birthdayInfo: Swift.String?
  public var phoneNo: Swift.String?
  public var emailAddr: Swift.String?
  public var addressInfo: Swift.String?
  public var marryYn: Swift.String?
  @objc override dynamic public init()
  @objc public init(userID: Swift.String, userName: Swift.String?, nickName: Swift.String?, gender: Swift.String?, birth: Swift.String?, phoneNo: Swift.String?, email: Swift.String, address: Swift.String?, marry: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class UserAccountData : EventParam {
  public var userID: Swift.String!
  @objc override dynamic public init()
  @objc public init(userID: Swift.String)
  @objc deinit
}
extension PaymentMethod : Swift.Equatable {}
extension PaymentMethod : Swift.Hashable {}
extension PaymentMethod : Swift.RawRepresentable {}
extension MobtuneEvent : Swift.Equatable {}
extension MobtuneEvent : Swift.Hashable {}
extension MobtuneEvent : Swift.RawRepresentable {}
